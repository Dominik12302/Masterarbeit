% function [cal_file, cal_data] = read_caldata(channelname,sensorname,sensorsn,sfreq,cal_path)
function obj = sp_readcaldata(obj,ts)
cal_file = {''};
cal_data = [1e+6 1e-6; 1 1 ; 0 0];
cal_path = obj.caldir{1};
if ts.resmpfreq, sfreq = ts.srate; else sfreq = ts.resmpfreq; end
if ~isdir(obj.caldir{1})
    if obj.debuglevel == 2, disp([' - calibration directory ' obj.caldir{1} ' does not exist!']); end
    cal_file = {''};
    cal_data = [1e+6 1e-5; 1 1 ; 0 0];
    % use theoretical transfer function
    for ich = 1:numel(ts.usech)
        cal_file = {''};
        cal_data = [1e+6 1e-5; 1 1 ; 0 0];
        sensorname = ts.sens_name(ts.usech(ich));
        if ~isempty(strfind(sensorname{1},'MFS05'))  || ~isempty(strfind(sensorname{1},'mfs05'))
            f = logspace(-4,5,9*7);
            P1 = 1i*f/4;
            P2 = 1i*f/8192;
            F = P1./(1+P1).*1./(1+P2);
            data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
            if obj.debuglevel == 1,  disp([' - ' sensorname{1} ': using theoretical transfer function']); end
            cal_file = {''};
            cal_data = data;
        elseif ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'mfs06'))
            f = logspace(-4,5,9*7);
            P1 = 1i*f/4;
            P2 = 1i*f/8192;
            F = P1./(1+P1).*1./(1+P2);
            data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
            if obj.debuglevel == 1,  disp([' - ' sensorname{1} ': using theoretical transfer function']); end
            cal_file = {''};
            cal_data = data;
        elseif ~isempty(strfind(sensorname{1},'MFS07'))  || ~isempty(strfind(sensorname{1},'mfs07'))
            f = logspace(-4,5,9*7);
            P1 = 1i*f/32;
            P2 = 1i*f/40000;
            F = P1./(1+P1).*1./(1+P2);
            data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
            if obj.debuglevel == 1,  disp([' - ' sensorname{1} ': using theoretical transfer function']); end
            cal_file = {''};
            cal_data = data;
        elseif ~isempty(strfind(sensorname{1},'SHFT02'))  || ~isempty(strfind(sensorname{1},'shft02'))
            f = logspace(0,6,6*7);
            P1 = 1i*f/300000;
            F = 1./(1+P1);
            data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
            if obj.debuglevel == 1,  disp([' - ' sensorname{1} ': using theoretical transfer function']); end
            cal_file = {''};
            cal_data = data;
        else
            if obj.debuglevel == 2,  disp([' - ' sensorname{1} ' assuming unit responses!']); end
        end
        obj.calfile(ich) = cal_file;
        obj.caldata{ich} = cal_data;
    end
else
    % magnetic field
    for ich = 1:numel(ts.usech)
        sensorname = ts.sens_name(ts.usech(ich));
        channelname = ts.chnames(ts.usech(ich));
        sensorsn = ts.sens_sn(ts.usech(ich));
        if ~isempty(strfind(channelname{1},'B'))
            % magnetic channel
            [cal_file,cal_data] = findmags(channelname, sensorname, sensorsn,cal_file,cal_data,cal_path,obj.debuglevel,sfreq);         
        elseif ~isempty(strfind(channelname{1},'E'))
            % electric channel
            cal_file = {''};
            cal_data = [1e+6 1e-6; 1 1 ; 0 0];
            if obj.debuglevel == 2, disp(' - electric channel! -> unit response assumed'); end
        else
            cal_file = {''};
            cal_data = [1e+6 1e-6; 1 1 ; 0 0];
            if obj.debuglevel == 1, disp('- unknown channel type! -> unit response assumed'); end
        end
        obj.calfile(ich) = cal_file;
        obj.caldata{ich}  = cal_data;
    end
end

function [cal_file,cal_data] = findmags(channelname, sensorname, sensorsn,cal_file,cal_data,cal_path,debuglevel,sfreq)


%% Metronix calibration format
% assumes the following file naming convention
% mfs50004.cal for mfs05 coil with SN 4
% mfs70113.cal for mfs07 coil with SN 113

p2 = sensorsn{1};
p1 = sensorname{1};
p2s = num2str(p2);

%%sensorname{1} = 'mfs06 ';
% MFS coils
if ~isempty(strfind(sensorname{1},'MFS05'))  || ~isempty(strfind(sensorname{1},'mfs05'))
    rspname = ['mfs50' p2s '.cal'];
elseif ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'mfs06'))
    rspname = ['mfs60' p2s '.cal'];
elseif ~isempty(strfind(sensorname{1},'MFS07'))  || ~isempty(strfind(sensorname{1},'mfs07'))
    rspname = ['mfs70' p2s '.cal'];
elseif ~isempty(strfind(sensorname{1},'SHFT02'))  || ~isempty(strfind(sensorname{1},'shft02'))
    rspname = ['shft02' p2s '.cal'];
elseif ~isempty(strfind(sensorname{1},'COIL'))  || ~isempty(strfind(sensorname{1},'coil'))
    rspname = ['COIL' p2s '.cal'];
else
    cal_file = {''};
    cal_data = [1e+6 1e-5; 1 1 ; 0 0];
    if debuglevel == 2,  disp('CALIBRATION: unknown magnetic sensor! -> unit response assumed'); end
    return;
end

% try to locate this file
if exist(fullfile(cal_path,rspname))==2 % file exists
    if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
    fid = fopen(fullfile(cal_path,rspname));
    tmp = fgetl(fid);
    while isempty(strfind(tmp,'Chopper On')) && ~feof(fid)
        tmp = fgetl(fid);
    end
    tmp = fgetl(fid);
    dataon = [];
    while ~isempty(tmp) && ~feof(fid) &&  isempty(strfind(tmp,'Chopper Off'))
        dataon = [dataon sscanf(tmp,'%f %f %f',[3 1])];
        tmp = fgetl(fid);
    end
    
    while isempty(strfind(tmp,'Chopper Off')) && ~feof(fid)
        tmp = fgetl(fid);
    end
    tmp = fgetl(fid);
    dataoff = [];
    while ~isempty(tmp) && ~feof(fid)
        dataoff = [dataoff sscanf(tmp,'%f %f %f',[3 1])];
        tmp = fgetl(fid);
    end
    fclose(fid);
    if sfreq > 512, data = dataoff; else data = dataon; end
    if numel(data)>=5
        data = [data(:,1) data];
        data(1,1) = 1e-5;
        data(2,:) = data(2,:).*data(1,:);
        cal_data = data;
        cal_file = {fullfile(cal_path,rspname)};
    end
    return;
end

% assumes gfz naming convention of coil
% 4 chars, first identifies type of mfs coil (5,6,7), the remaining three
% identify the serial number of that coil

% MFS coils
if ~isempty(strfind(sensorname{1},'MFS05')) || ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'MFS07'))
    rspname = ['mfs' p2s(1) '0' p2s '.cal'];
elseif ~isempty(strfind(sensorname{1},'COIL'))  || ~isempty(strfind(sensorname{1},'coil'))
    rspname = ['COIL' p2s '.cal'];
else
    cal_file = {''};
    cal_data = [1e+6 1e-5; 1 1 ; 0 0];
    if debuglevel == 1, disp('** Warning: unknown magnetic sensor! -> unit response assumed'); end
    return
end

% try to locate this file
if exist(fullfile(cal_path,rspname))==2 % file exists
    if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
    fid = fopen(fullfile(cal_path,rspname));
    tmp = fgetl(fid);
    while isempty(strfind(tmp,'Chopper On')) && ~feof(fid)
        tmp = fgetl(fid);
    end
    tmp = fgetl(fid);
    dataon = [];
    while ~isempty(tmp) && ~feof(fid) &&  isempty(strfind(tmp,'Chopper Off'))
        dataon = [dataon sscanf(tmp,'%f %f %f',[3 1])];
        tmp = fgetl(fid);
    end
    
    while isempty(strfind(tmp,'Chopper Off')) && ~feof(fid)
        tmp = fgetl(fid);
    end
    tmp = fgetl(fid);
    dataoff = [];
    while ~isempty(tmp) && ~feof(fid)
        dataoff = [dataoff sscanf(tmp,'%f %f %f',[3 1])];
        tmp = fgetl(fid);
    end
    fclose(fid);
    if sfreq > 512, data = dataoff; else data = dataon; end
    if numel(data)>=5
        data(2,:) = data(2,:).*data(1,:);
        cal_data = data;
        cal_file = {fullfile(cal_path,rspname)};
    end
    %                 return;
end

%% Potsdam Calibration format
str = {'BB','LF','HF'};
for ind = 1 : numel(str);

    % magnetic channel
    if ~isempty(strfind(sensorname{1},'MFS05')) || ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'MFS07'))
        rspname = ['Metronix_Coil-----TYPE-00' p2s(1) '_',str{ind},'-ID-000' p2s(2:end) '.RSP'];
    elseif ~isempty(strfind(sensorname{1},'COIL'))  || ~isempty(strfind(sensorname{1},'coil'))
        rspname = ['COIL' p2s '.cal'];
    else
        cal_file = {''};
        cal_data = [1e+6 1e-6; 1 1 ; 0 0];
        if debuglevel == 1, disp('** Warning: unknown magnetic channel! -> unit response assumed'); end
        return;
    end

    % try to locate this file
    if exist(fullfile(cal_path,rspname))==2 % file exists
        if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
        fid = fopen(fullfile(cal_path,rspname));
        tmp = fgetl(fid);
        staticgain = 0;
        while isempty(strfind(tmp,'---------------')) && ~feof(fid)
            tmp = fgetl(fid);
            if strfind(tmp,'StaticGain')
                staticgain = 1;
            end
        end
        if ~staticgain
            tmp = fscanf(fid,'%f %f',[2 1]);
        end
        tmp = fgetl(fid);tmp = fgetl(fid);
        data = [];
        while isempty(strfind(tmp,'---------------')) && ~feof(fid)
            data = [data sscanf(tmp,'%f %f %f',[3 1])];
            tmp = fgetl(fid);
        end
        data(2,:) = data(2,:);%./data(1,:);
        fclose(fid);
        if numel(data)>=5
            cal_data = data;
            cal_file = {fullfile(cal_path,rspname)};
        end
        return;
    end

    % magnetic channel
    if ~isempty(strfind(sensorname{1},'MFS05')) || ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'MFS07'))
        if ~isempty(strfind(sensorname{1},'MFS05')), bla = '5'; end
        if ~isempty(strfind(sensorname{1},'MFS06')), bla = '6'; end
        if ~isempty(strfind(sensorname{1},'MFS07')), bla = '7'; end
        while numel(p2s)<3, p2s = ['0' p2s]; end
        rspname = ['Metronix_Coil-----TYPE-00' bla '_',str{ind},'-ID-000' p2s(1:end) '.RSP'];
    elseif ~isempty(strfind(sensorname{1},'COIL'))  || ~isempty(strfind(sensorname{1},'coil'))
        rspname = ['COIL' p2s '.cal'];
    else
        cal_file = {''};
        cal_data = [1e+6 1e-6; 1 1 ; 0 0];
        if debuglevel == 1, disp('**Warning: unknown magnetic channel! -> unit response assumed'); end
        return;
    end

    % try to locate this file
    if exist(fullfile(cal_path,rspname))==2 % file exists
        if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
        fid = fopen(fullfile(cal_path,rspname));
        tmp = fgetl(fid);
        staticgain = 0;
        while isempty(strfind(tmp,'---------------')) && ~feof(fid)
            tmp = fgetl(fid);
            if strfind(tmp,'StaticGain')
                staticgain = 1;
            end
        end
        if ~staticgain
            tmp = fscanf(fid,'%f %f',[2 1]);
        end
        tmp = fgetl(fid);tmp = fgetl(fid);
        data = [];
        while isempty(strfind(tmp,'---------------')) && ~feof(fid)
            data = [data sscanf(tmp,'%f %f %f',[3 1])];
            tmp = fgetl(fid);
        end
        data(2,:) = data(2,:);%./data(1,:);
        fclose(fid);
        if numel(data)>=5
            cal_data = data;
            cal_file = {fullfile(cal_path,rspname)};
        end
        return;
    end

end

%% Phoenix Calibration format

% magnetic channel
if ~isempty(strfind(sensorname{1},'MFS05')) || ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'MFS07'))
    rspname = ['Metronix_Coil-----TYPE-00' p2s(1) '_BB-ID-000' p2s(2:end) '.RSP'];
elseif ~isempty(strfind(sensorname{1},'COIL'))  || ~isempty(strfind(sensorname{1},'coil'))
    rspname = ['COIL' p2s '_CLC .asc'];
else
    cal_file = {''};
    cal_data = [1e+6 1e-6; 1 1 ; 0 0];
    if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
    return;
end

% try to locate this file
if exist(fullfile(cal_path,rspname))==2 % file exists
    if debuglevel == 1,  disp([' - ' channelname{1} ': found calibration file ' fullfile(cal_path,rspname)]); end
    fid = fopen(fullfile(cal_path,rspname));
    tmp = fgetl(fid);
    tmp = fgetl(fid);
    tmp = fgetl(fid);
    tmp = fgetl(fid);
    data = fscanf(fid,'%d %f %f %f',[4 inf]);
    %data(2,:) = data(2,:);%./data(1,:);
    fclose(fid);
    if numel(data)>=5
        cal_data = data(2:end,:);
        cal_file = {fullfile(cal_path,rspname)};
    end
    return;
end

%% use theoretical transfer function
if ~isempty(strfind(sensorname{1},'MFS05'))  || ~isempty(strfind(sensorname{1},'mfs05'))
    f = logspace(-4,5,9*7);
    P1 = 1i*f/4;
    P2 = 1i*f/8192;
    F = P1./(1+P1).*1./(1+P2);
    data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
    if debuglevel == 1, disp([' - ' channelname{1} ': using theoretical transfer function']); end
    cal_file = {''};
    cal_data = data;
elseif ~isempty(strfind(sensorname{1},'MFS06')) || ~isempty(strfind(sensorname{1},'mfs06'))
    f = logspace(-5,5,10*7);
    P1 = 1i*f/4;
    P2 = 1i*f/8192;
    F = P1./(1+P1).*1./(1+P2);
    data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
    if debuglevel == 1, disp([' - ' channelname{1} ': using theoretical transfer function']); end
    cal_file = {''};
    cal_data = data;
elseif ~isempty(strfind(sensorname{1},'MFS07'))  || ~isempty(strfind(sensorname{1},'mfs07'))
    f = logspace(-5,5,10*7);
    P1 = 1i*f/32;
    P2 = 1i*f/40000;
    F = P1./(1+P1).*1./(1+P2);
    data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
    if debuglevel == 1, disp([' - ' channelname{1} ': using theoretical transfer function']); end
    cal_file = {''};
    cal_data = data;
elseif ~isempty(strfind(sensorname{1},'SHFT02'))  || ~isempty(strfind(sensorname{1},'shft02'))
    f = logspace(0,6,6*7);
    P1 = 1i*f/300000;
    F = 1./(1+P1);
    data(1,:)=f; data(2,:) = abs(F); data(3,:) = angle(F)*180/pi;
    if debuglevel == 1, disp([' - ' channelname{1} ': using theoretical transfer function']); end
    cal_file = {''};
    cal_data = data;
end

